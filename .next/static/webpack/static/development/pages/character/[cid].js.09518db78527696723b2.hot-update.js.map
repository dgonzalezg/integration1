{"version":3,"file":"static/webpack/static/development/pages/character/[cid].js.09518db78527696723b2.hot-update.js","sources":["webpack:///./pages/character/[cid].js"],"sourcesContent":["import Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\n\nconst Character = props => (\n  <Layout>\n    <h1>{props.character.name}</h1>\n    {props.character.image ? <img src={props.character.image} /> : null}\n<p>Status: {props.character.status}</p>\n    <p>Specie: {props.character.species}</p>\n<p>{props.character.type ? `Type: ${props.character.type}`: null}</p>\n<p>Gender: {props.character.gender}</p>\n<p>Origin: {props.character.origin.url ? <Link href=\"/location/[lid]\" as={`/location/${props.origin.id}`}>\n            <a>{props.character.origin.name}</a>\n          </Link> : 'unkown'}</p>\n<p>Location: {props.character.location.url ? <Link href=\"/location/[lid]\" as={`/location/${props.location.id}`}>\n            <a>{props.character.location.name}</a>\n          </Link> : 'unkown'}</p>\n      <h2>Episodes</h2>\n      {props.episodes.map(episode => (\n        <li key={episode.id}>\n          <Link href=\"/episode/[eid]\" as={`/episode/${episode.id}`}>\n            <a>{episode.name}</a>\n          </Link>\n        </li>\n      ))}\n       <style jsx>{`\n  h1,\n  a {\n    font-family: 'Arial';\n  }\n\n  ul {\n    padding: 0;\n  }\n\n  li {\n    list-style: none;\n    margin: 5px 0;\n  }\n\n  a {\n    text-decoration: none;\n    color: blue;\n  }\n\n  a:hover {\n    opacity: 0.6;\n  }\n`}</style>\n  </Layout>\n);\n\nCharacter.getInitialProps = async function(context) {\n  const { cid } = context.query;\n\n  const res = await fetch(`https://rickandmortyapi.com/api/character/${cid}`).then(\n    (response) => {\n      return response.json();\n    }\n  )\n  let origin_res = null;\n  if (res.origin.url) {\n    origin_res = await fetch(res.origin.url).then(\n      (response) => {\n        return response.json();\n      }\n    )\n  }\n  let location_res = null;\n  if (res.location.url) {\n    location_res = await fetch(res.location.url).then(\n      (response) => {\n        return response.json();\n      }\n    )\n  }\n\n  const eids = [];\n\n  for (let i = 0; i < res.episode.length; i++) {\n    const episode = res.episode[i].split('/');\n    eids.push(episode[episode.length-1]);\n  };\n  \n  let episodes_arr = await fetch(`https://rickandmortyapi.com/api/episode/${eids}`).then(\n    (response) => {\n      return response.json();\n    });\n    if (eids.length == 1) {\n      episodes_arr = [episodes_arr]\n    }\n\n  return { character: res, episodes: episodes_arr, origin: origin_res, location: location_res };\n};\n\nexport default Character;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAdA;AAAA;AAAA;AADA;AACA;AAgDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AACA;AACA;AAPA;AAGA;AAKA;AACA;AATA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAYA;AACA;AACA;AAdA;AAUA;AACA;AAXA;AAgBA;AACA;AAjBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAoBA;AACA;AACA;AAtBA;AAkBA;AACA;AAnBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AA9BA;AAAA;AAkCA;AACA;AACA;AApCA;AAgCA;AACA;AAGA;AACA;AACA;AACA;AAvCA;AAwCA;AAAA;AAAA;AAAA;AAAA;AACA;AAzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA0CA;;;;A","sourceRoot":""}