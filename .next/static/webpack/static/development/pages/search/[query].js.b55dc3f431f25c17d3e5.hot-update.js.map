{"version":3,"file":"static/webpack/static/development/pages/search/[query].js.b55dc3f431f25c17d3e5.hot-update.js","sources":["webpack:///./pages/search/.js"],"sourcesContent":["import Layout from '../../components/MyLayout';\nimport Link from 'next/link';\nconst Results = props => (\n<Layout>\n    <h1>Results</h1>\n    <ul>\n      {props.episodes.map(episode => (\n        <li key={episode.id}>\n          <Link href=\"/episode/[eid]\" as={`/episode/${episode.id}`}>\n            <a>{episode.name}</a>\n          </Link>\n        </li>\n      ))}\n      {props.characters.map(character => (\n        <li key={character.id}>\n          <Link href=\"/character/[cid]\" as={`/character/${character.id}`}>\n            <a>{character.name}</a>\n          </Link>\n        </li>\n      ))}\n      {props.locations.map(location => (\n        <li key={location.id}>\n          <Link href=\"/location/[lid]\" as={`/location/${location.id}`}>\n            <a>{location.name}</a>\n          </Link>\n        </li>\n      ))}\n    </ul>\n  </Layout>\n);\n\nResults.getInitialProps = async function(context) {\n  const { query } = context.query;\n  const episodes = [];\n  const characters = [];\n  const locations = [];\n  let eurl = 'https://rickandmortyapi.com/api/episode/';\n   while (true) {\n     const eresponse = await fetch(eurl).then(\n     (response) => {\n       return response.json();\n     }\n   );\n   eresponse.results.forEach(episode => {\n    if (episode.name.toLowerCase().match('/' + query.toLowerCase() + '/')) {\n      episodes.push(episode);\n    }\n   });\n   if (eresponse.info.next != '') {\n     eurl = eresponse.info.next\n   }\n   else {\n     break\n   }\n   }\n\n   const cids = Array.from(Array(10).keys());\n   const ncids = cids.map(i => {\n     return i+1;\n   });\n   const cresponse = await fetch(`https://rickandmortyapi.com/api/characters/${ncids}`).then(\n     (response) => {\n       return response.json();\n     }\n   )\n   console.log(ncids);\n   let lurl = 'https://rickandmortyapi.com/api/location/';\n   while (true) {\n     const lresponse = await fetch(lurl).then(\n     (response) => {\n       return response.json();\n     }\n   );\n   lresponse.results.forEach(location => {\n    if (location.name.toLowerCase().match('/' + query.toLowerCase() + '/')) {\n      locations.push(location);\n    }\n   });\n   if (lresponse.info.next != '') {\n     lurl = lresponse.info.next\n   }\n   else {\n     break\n   }\n\n\n\n  return {episodes, characters, locations};\n}}\n\nexport default Results;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAlBA;AACA;AA4BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AACA;AADA;AAAA;AASA;AACA;AACA;AAXA;AAOA;AAKA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAAA;AAAA;AAAA;AACA;AAiBA;AAlBA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAyBA;AACA;AACA;AACA;AA5BA;AAAA;AA+BA;AACA;AACA;AAjCA;AA6BA;AAKA;AACA;AACA;AApCA;AAAA;AACA;AADA;AAAA;AAuCA;AACA;AACA;AAzCA;AAqCA;AAKA;AACA;AACA;AACA;AACA;AACA;AA/CA;AAAA;AAAA;AAAA;AACA;AA+CA;AAhDA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAwDA;AAAA;AAAA;AAAA;AACA;AAzDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA0DA;;;;A","sourceRoot":""}