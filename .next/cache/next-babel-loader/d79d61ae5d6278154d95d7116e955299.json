{"ast":null,"code":"var _jsxFileName = \"/Users/diego/Google Drive/PUC/2020/Taller de Integracion/Tarea/T1/integration1/pages/c/[cid].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\n\nconst Character = props => __jsx(Layout, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 3\n  }\n}, __jsx(\"h1\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }\n}, props.character.name), props.character.image ? __jsx(\"img\", {\n  src: props.character.image,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 30\n  }\n}) : null, __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 1\n  }\n}, \"Status: \", props.character.status), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }\n}, \"Specie: \", props.character.species), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 1\n  }\n}, props.character.type ? `Type: ${props.character.type}` : null), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 1\n  }\n}, \"Gender: \", props.character.gender), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 1\n  }\n}, \"Origin: \", __jsx(Link, {\n  href: \"/l/[lid]\",\n  as: `/l/${props.character.origin.id}`,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 13\n  }\n}, __jsx(\"a\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 13\n  }\n}, props.character.origin.name))), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 1\n  }\n}, \"Location: \", props.character.location.name), __jsx(\"h2\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 7\n  }\n}, \"Episodes\"), props.episodes.map(episode => __jsx(\"li\", {\n  key: episode.id,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }\n}, __jsx(Link, {\n  href: \"/e/[eid]\",\n  as: `/e/${episode.id}`,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 11\n  }\n}, __jsx(\"a\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 13\n  }\n}, episode.name)))));\n\nCharacter.getInitialProps = async function (context) {\n  const {\n    cid\n  } = context.query;\n  const episodes_arr = [];\n  const res = await fetch(`https://rickandmortyapi.com/api/character/${cid}`).then(response => {\n    return response.json();\n  });\n\n  for (let i = 0; i < res.episode.length; i++) {\n    const episode = res.episode[i];\n    const crest = await fetch(episode).then(response => {\n      return response.json();\n    });\n    episodes_arr.push(crest);\n  }\n\n  ;\n  return {\n    Character: res,\n    episodes: episodes_arr\n  };\n};\n\nexport default Character;","map":{"version":3,"sources":["/Users/diego/Google Drive/PUC/2020/Taller de Integracion/Tarea/T1/integration1/pages/c/[cid].js"],"names":["Layout","fetch","Link","Character","props","character","name","image","status","species","type","gender","origin","id","location","episodes","map","episode","getInitialProps","context","cid","query","episodes_arr","res","then","response","json","i","length","crest","push"],"mappings":"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","sourcesContent":["import Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\n\nconst Character = props => (\n  <Layout>\n    <h1>{props.character.name}</h1>\n    {props.character.image ? <img src={props.character.image} /> : null}\n<p>Status: {props.character.status}</p>\n    <p>Specie: {props.character.species}</p>\n<p>{props.character.type ? `Type: ${props.character.type}`: null}</p>\n<p>Gender: {props.character.gender}</p>\n<p>Origin: {<Link href=\"/l/[lid]\" as={`/l/${props.character.origin.id}`}>\n            <a>{props.character.origin.name}</a>\n          </Link>}</p>\n<p>Location: {props.character.location.name}</p>\n      <h2>Episodes</h2>\n      {props.episodes.map(episode => (\n        <li key={episode.id}>\n          <Link href=\"/e/[eid]\" as={`/e/${episode.id}`}>\n            <a>{episode.name}</a>\n          </Link>\n        </li>\n      ))}\n  </Layout>\n);\n\nCharacter.getInitialProps = async function(context) {\n  const { cid } = context.query;\n\n \n  const episodes_arr = [];\n  const res = await fetch(`https://rickandmortyapi.com/api/character/${cid}`).then(\n    (response) => {\n      return response.json();\n    }\n  )\n  \n  for (let i = 0; i < res.episode.length; i++) {\n    const episode = res.episode[i];\n    const crest = await fetch(episode).then(\n      (response) => {\n        return response.json();\n      })\n    episodes_arr.push(crest);\n  };\n\n\n\n  return { Character: res, episodes: episodes_arr };\n};\n\nexport default Character;"]},"metadata":{},"sourceType":"module"}