{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\n\nconst Character = props => __jsx(Layout, null, __jsx(\"h1\", null, props.character.name), props.character.image ? __jsx(\"img\", {\n  src: props.character.image\n}) : null, __jsx(\"p\", null, \"Status: \", props.character.status), __jsx(\"p\", null, \"Specie: \", props.character.species), __jsx(\"p\", null, props.character.type ? `Type: ${props.character.type}` : null), __jsx(\"p\", null, \"Gender: \", props.character.gender), __jsx(\"p\", null, \"Origin: \", props.character.origin.url ? __jsx(Link, {\n  href: \"/location/[lid]\",\n  as: `/location/${props.origin.id}`\n}, __jsx(\"a\", null, props.character.origin.name)) : 'unkown'), __jsx(\"p\", null, \"Location: \", props.character.location.url ? __jsx(Link, {\n  href: \"/location/[lid]\",\n  as: `/location/${props.location.id}`\n}, __jsx(\"a\", null, props.character.location.name)) : 'unkown'), __jsx(\"h2\", null, \"Episodes\"), props.episodes.map(episode => __jsx(\"li\", {\n  key: episode.id\n}, __jsx(Link, {\n  href: \"/episode/[eid]\",\n  as: `/episode/${episode.id}`\n}, __jsx(\"a\", null, episode.name)))));\n\nCharacter.getInitialProps = async function (context) {\n  const {\n    cid\n  } = context.query;\n  const res = await fetch(`https://rickandmortyapi.com/api/character/${cid}`).then(response => {\n    return response.json();\n  });\n  let origin_res = null;\n\n  if (res.origin.url) {\n    origin_res = await fetch(res.origin.url).then(response => {\n      return response.json();\n    });\n  }\n\n  let location_res = null;\n\n  if (res.location.url) {\n    location_res = await fetch(res.location.url).then(response => {\n      return response.json();\n    });\n  }\n\n  const eids = [];\n\n  for (let i = 0; i < res.episode.length; i++) {\n    const episode = res.episode[i].split('/');\n    eids.push(episode[episode.length - 1]);\n  }\n\n  ;\n  let episodes_arr = await fetch(`https://rickandmortyapi.com/api/episode/${eids}`).then(response => {\n    return response.json();\n  });\n\n  if (eids.length == 1) {\n    episodes_arr = [episodes_arr];\n  }\n\n  return {\n    character: res,\n    episodes: episodes_arr,\n    origin: origin_res,\n    location: location_res\n  };\n};\n\nexport default Character;","map":null,"metadata":{},"sourceType":"module"}