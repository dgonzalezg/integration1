{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/diego/Google Drive/PUC/2020/Taller de Integracion/Tarea/T1/integration1/pages/p/[eid].js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\n\nvar Episode = function Episode(props) {\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 3\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, props.episode.name), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 1\n    }\n  }, \"Release date: \", props.episode.air_date), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }\n  }, \"Episode: \", props.episode.episode), props.episode.characters.map(function (character) {\n    return __jsx(\"li\", {\n      key: character.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }\n    }, __jsx(Link, {\n      href: \"/p/[cid]\",\n      as: \"/p/\".concat(character.id),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 11\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 13\n      }\n    }, character.name)));\n  }));\n};\n\nEpisode.getInitialProps = function _callee2(context) {\n  var id, characters_arr, res;\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          id = context.query.id;\n          console.log(id);\n          characters_arr = [];\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(fetch(\"https://rickandmortyapi.com/api/episode/\".concat(id)).then(function (response) {\n            return response.json();\n          }));\n\n        case 5:\n          res = _context2.sent;\n          res.characters.forEach(function _callee(character) {\n            var cres;\n            return _regeneratorRuntime.async(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return _regeneratorRuntime.awrap(fetch(character).then(function (response) {\n                      return response.json();\n                    }));\n\n                  case 2:\n                    cres = _context.sent;\n                    characters_arr.push(cres);\n\n                  case 4:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          });\n          return _context2.abrupt(\"return\", {\n            episode: res,\n            characters: characters_arr\n          });\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Episode;","map":{"version":3,"sources":["/Users/diego/Google Drive/PUC/2020/Taller de Integracion/Tarea/T1/integration1/pages/p/[eid].js"],"names":["Layout","fetch","Episode","props","episode","name","air_date","characters","map","character","id","getInitialProps","context","query","console","log","characters_arr","then","response","json","res","forEach","cres","push"],"mappings":";;;;;;;AAAA,OAAOA,MAAP,MAAmB,2BAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,KAAK;AAAA,SACnB,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,KAAK,CAACC,OAAN,CAAcC,IAAnB,CADF,EAEF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAkBF,KAAK,CAACC,OAAN,CAAcE,QAAhC,CAFE,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAaH,KAAK,CAACC,OAAN,CAAcA,OAA3B,CAHF,EAIGD,KAAK,CAACC,OAAN,CAAcG,UAAd,CAAyBC,GAAzB,CAA6B,UAAAC,SAAS;AAAA,WACnC;AAAI,MAAA,GAAG,EAAEA,SAAS,CAACC,EAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,UAAX;AAAsB,MAAA,EAAE,eAAQD,SAAS,CAACC,EAAlB,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAID,SAAS,CAACJ,IAAd,CADF,CADF,CADmC;AAAA,GAAtC,CAJH,CADmB;AAAA,CAArB;;AAeAH,OAAO,CAACS,eAAR,GAA0B,kBAAeC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBF,UAAAA,EADgB,GACTE,OAAO,CAACC,KADC,CAChBH,EADgB;AAExBI,UAAAA,OAAO,CAACC,GAAR,CAAYL,EAAZ;AACMM,UAAAA,cAHkB,GAGD,EAHC;AAAA;AAAA,2CAINf,KAAK,mDAA4CS,EAA5C,EAAL,CAAuDO,IAAvD,CAChB,UAACC,QAAD,EAAc;AACZ,mBAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,WAHe,CAJM;;AAAA;AAIlBC,UAAAA,GAJkB;AAUxBA,UAAAA,GAAG,CAACb,UAAJ,CAAec,OAAf,CAAuB,iBAAMZ,SAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDACFR,KAAK,CAACQ,SAAD,CAAL,CAAiBQ,IAAjB,CACjB,UAACC,QAAD,EAAc;AACZ,6BAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,qBAHgB,CADE;;AAAA;AACfG,oBAAAA,IADe;AAMrBN,oBAAAA,cAAc,CAACO,IAAf,CAAoBD,IAApB;;AANqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAvB;AAVwB,4CAoBjB;AAAElB,YAAAA,OAAO,EAAEgB,GAAX;AAAgBb,YAAAA,UAAU,EAAES;AAA5B,WApBiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B;;AAuBA,eAAed,OAAf","sourcesContent":["import Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\n\nconst Episode = props => (\n  <Layout>\n    <h1>{props.episode.name}</h1>\n<p>Release date: {props.episode.air_date}</p>\n    <p>Episode: {props.episode.episode}</p>\n    {props.episode.characters.map(character => (\n        <li key={character.id}>\n          <Link href=\"/p/[cid]\" as={`/p/${character.id}`}>\n            <a>{character.name}</a>\n          </Link>\n        </li>\n      ))}\n  </Layout>\n);\n\nEpisode.getInitialProps = async function(context) {\n  const { id } = context.query;\n  console.log(id);\n  const characters_arr = [];\n  const res = await fetch(`https://rickandmortyapi.com/api/episode/${id}`).then(\n    (response) => {\n      return response.json();\n    }\n  )\n  \n  res.characters.forEach(async character => {\n    const cres = await fetch(character).then(\n      (response) => {\n        return response.json();\n      }\n    )\n    characters_arr.push(cres)\n  });\n  \n\n  return { episode: res, characters: characters_arr };\n};\n\nexport default Episode;"]},"metadata":{},"sourceType":"module"}