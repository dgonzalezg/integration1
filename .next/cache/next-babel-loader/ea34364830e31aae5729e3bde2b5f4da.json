{"ast":null,"code":"var _jsxFileName = \"/Users/diego/Google Drive/PUC/2020/Taller de Integracion/Tarea/T1/integration1/pages/location/[lid].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\n\nconst Location = props => __jsx(Layout, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 3\n  }\n}, __jsx(\"h1\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }\n}, props.location.name), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 1\n  }\n}, \"Type: \", props.location.type), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }\n}, \"Dimension: \", props.location.dimension), __jsx(\"h2\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }\n}, \" Residents\"), props.residents.map(resident => __jsx(\"li\", {\n  key: resident.id,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }\n}, __jsx(Link, {\n  href: \"/character/[cid]\",\n  as: `/character/${resident.id}`,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 11\n  }\n}, __jsx(\"a\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 13\n  }\n}, resident.name)))));\n\nLocation.getInitialProps = async function (context) {\n  const {\n    lid\n  } = context.query;\n  const residents_arr = [];\n  const res = await fetch(`https://rickandmortyapi.com/api/location/${lid}`).then(response => {\n    return response.json();\n  });\n\n  for (let i = 0; i < res.residents.length; i++) {\n    const resident = res.residents[i];\n    const crest = await fetch(resident).then(response => {\n      return response.json();\n    });\n    residents_arr.push(crest);\n  }\n\n  ;\n  return {\n    location: res,\n    residents: residents_arr\n  };\n};\n\nexport default Location;","map":{"version":3,"sources":["/Users/diego/Google Drive/PUC/2020/Taller de Integracion/Tarea/T1/integration1/pages/location/[lid].js"],"names":["Layout","fetch","Link","Location","props","location","name","type","dimension","residents","map","resident","id","getInitialProps","context","lid","query","residents_arr","res","then","response","json","i","length","crest","push"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,2BAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,MAAMC,QAAQ,GAAGC,KAAK,IACpB,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAKA,KAAK,CAACC,QAAN,CAAeC,IAApB,CADF,EAEF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAUF,KAAK,CAACC,QAAN,CAAeE,IAAzB,CAFE,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAeH,KAAK,CAACC,QAAN,CAAeG,SAA9B,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,EAKGJ,KAAK,CAACK,SAAN,CAAgBC,GAAhB,CAAoBC,QAAQ,IACzB;AAAI,EAAA,GAAG,EAAEA,QAAQ,CAACC,EAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,MAAC,IAAD;AAAM,EAAA,IAAI,EAAC,kBAAX;AAA8B,EAAA,EAAE,EAAG,cAAaD,QAAQ,CAACC,EAAG,EAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAID,QAAQ,CAACL,IAAb,CADF,CADF,CADH,CALH,CADF;;AAgBAH,QAAQ,CAACU,eAAT,GAA2B,gBAAeC,OAAf,EAAwB;AACjD,QAAM;AAAEC,IAAAA;AAAF,MAAUD,OAAO,CAACE,KAAxB;AAEA,QAAMC,aAAa,GAAG,EAAtB;AACA,QAAMC,GAAG,GAAG,MAAMjB,KAAK,CAAE,4CAA2Cc,GAAI,EAAjD,CAAL,CAAyDI,IAAzD,CACfC,QAAD,IAAc;AACZ,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,GAHe,CAAlB;;AAMA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACT,SAAJ,CAAcc,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7C,UAAMX,QAAQ,GAAGO,GAAG,CAACT,SAAJ,CAAca,CAAd,CAAjB;AACA,UAAME,KAAK,GAAG,MAAMvB,KAAK,CAACU,QAAD,CAAL,CAAgBQ,IAAhB,CACjBC,QAAD,IAAc;AACZ,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAHiB,CAApB;AAIAJ,IAAAA,aAAa,CAACQ,IAAd,CAAmBD,KAAnB;AACD;;AAAA;AAID,SAAO;AAAEnB,IAAAA,QAAQ,EAAEa,GAAZ;AAAiBT,IAAAA,SAAS,EAAEQ;AAA5B,GAAP;AACD,CAtBD;;AAwBA,eAAed,QAAf","sourcesContent":["import Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\n\nconst Location = props => (\n  <Layout>\n    <h1>{props.location.name}</h1>\n<p>Type: {props.location.type}</p>\n    <p>Dimension: {props.location.dimension}</p>\n    <h2> Residents</h2>\n    {props.residents.map(resident => (\n        <li key={resident.id}>\n          <Link href=\"/character/[cid]\" as={`/character/${resident.id}`}>\n            <a>{resident.name}</a>\n          </Link>\n        </li>\n      ))}\n  </Layout>\n);\n\nLocation.getInitialProps = async function(context) {\n  const { lid } = context.query;\n\n  const residents_arr = [];\n  const res = await fetch(`https://rickandmortyapi.com/api/location/${lid}`).then(\n    (response) => {\n      return response.json();\n    }\n  )\n  \n  for (let i = 0; i < res.residents.length; i++) {\n    const resident = res.residents[i];\n    const crest = await fetch(resident).then(\n      (response) => {\n        return response.json();\n      })\n    residents_arr.push(crest);\n  };\n\n\n\n  return { location: res, residents: residents_arr };\n};\n\nexport default Location;"]},"metadata":{},"sourceType":"module"}