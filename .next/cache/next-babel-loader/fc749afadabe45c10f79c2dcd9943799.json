{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/MyLayout';\nimport Link from 'next/link';\n\nconst Results = props => __jsx(Layout, null, __jsx(\"h1\", null, \"Results\"), __jsx(\"ul\", null, props.episodes.map(episode => __jsx(\"li\", {\n  key: episode.id\n}, __jsx(Link, {\n  href: \"/episode/[eid]\",\n  as: `/episode/${episode.id}`\n}, __jsx(\"a\", null, episode.name)))), props.characters.map(character => __jsx(\"li\", {\n  key: character.id\n}, __jsx(Link, {\n  href: \"/character/[cid]\",\n  as: `/character/${character.id}`\n}, __jsx(\"a\", null, character.name)))), props.locations.map(location => __jsx(\"li\", {\n  key: location.id\n}, __jsx(Link, {\n  href: \"/location/[lid]\",\n  as: `/location/${location.id}`\n}, __jsx(\"a\", null, location.name))))));\n\nResults.getInitialProps = async function (context) {\n  const {\n    query\n  } = context.query;\n  const episodes = [];\n  const characters = [];\n  const locations = [];\n  const eids = Array.from(Array(31).keys());\n  const neids = eids.map(i => {\n    return i + 1;\n  });\n  const eresponse = await fetch(`https://rickandmortyapi.com/api/episode/${neids}`).then(response => {\n    return response.json();\n  });\n  eresponse.forEach(episode => {\n    if (episode.name.toLowerCase().split(' ').includes(query.toLowerCase())) {\n      episodes.push(episode);\n    }\n  });\n  const cids = Array.from(Array(493).keys());\n  const ncids = cids.map(i => {\n    return i + 1;\n  });\n  const cresponse = await fetch(`https://rickandmortyapi.com/api/character/${ncids}`).then(response => {\n    return response.json();\n  });\n  cresponse.forEach(character => {\n    if (character.name.toLowerCase().split(' ').includes(query.toLowerCase())) {\n      characters.push(character);\n    }\n  });\n  const lids = Array.from(Array(76).keys());\n  const nlids = cids.map(i => {\n    return i + 1;\n  });\n  const lresponse = await fetch(`https://rickandmortyapi.com/api/location/${nlids}`).then(response => {\n    return response.json();\n  });\n  lresponse.forEach(location => {\n    if (location.name.toLowerCase().split(' ').includes(query.toLowerCase())) {\n      locations.push(location);\n    }\n  });\n  return {\n    episodes,\n    characters,\n    locations\n  };\n};\n\nexport default Results;","map":null,"metadata":{},"sourceType":"module"}