{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/diego/Google Drive/PUC/2020/Taller de Integracion/Tarea/T1/integration1/pages/episode/[eid].js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\n\nvar Episode = function Episode(props) {\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 3\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, props.episode.name), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 1\n    }\n  }, \"Release date: \", props.episode.air_date), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, \"Episode: \", props.episode.episode), __jsx(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }\n  }, \" Characters in this episode\"), props.characters.map(function (character) {\n    return __jsx(\"li\", {\n      key: character.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }\n    }, __jsx(Link, {\n      href: \"/character/[cid]\",\n      as: \"/character/\".concat(character.id),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 11\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }\n    }, character.name)));\n  }));\n};\n\nEpisode.getInitialProps = function _callee(context) {\n  var eid, res, cids, i, character, id, characters_arr;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          eid = context.query.eid;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"https://rickandmortyapi.com/api/episode/\".concat(eid)).then(function (response) {\n            return response.json();\n          }));\n\n        case 3:\n          res = _context.sent;\n          cids = [];\n\n          for (i = 0; i < res.characters.length; i++) {\n            character = res.characters[i].split('/');\n            console.log(character);\n            id = character[character.length];\n            cids.push(id);\n          }\n\n          ;\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(fetch(\"https://rickandmortyapi.com/api/character/\".concat(cids)).then(function (response) {\n            return response.json();\n          }));\n\n        case 9:\n          characters_arr = _context.sent;\n          return _context.abrupt(\"return\", {\n            episode: res,\n            characters: characters_arr\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Episode;","map":{"version":3,"sources":["/Users/diego/Google Drive/PUC/2020/Taller de Integracion/Tarea/T1/integration1/pages/episode/[eid].js"],"names":["Layout","fetch","Link","Episode","props","episode","name","air_date","characters","map","character","id","getInitialProps","context","eid","query","then","response","json","res","cids","i","length","split","console","log","push","characters_arr"],"mappings":";;;;;;;AAAA,OAAOA,MAAP,MAAmB,2BAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,KAAK;AAAA,SACnB,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,KAAK,CAACC,OAAN,CAAcC,IAAnB,CADF,EAEF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAkBF,KAAK,CAACC,OAAN,CAAcE,QAAhC,CAFE,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAaH,KAAK,CAACC,OAAN,CAAcA,OAA3B,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAJF,EAKGD,KAAK,CAACI,UAAN,CAAiBC,GAAjB,CAAqB,UAAAC,SAAS;AAAA,WAC3B;AAAI,MAAA,GAAG,EAAEA,SAAS,CAACC,EAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,kBAAX;AAA8B,MAAA,EAAE,uBAAgBD,SAAS,CAACC,EAA1B,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAID,SAAS,CAACJ,IAAd,CADF,CADF,CAD2B;AAAA,GAA9B,CALH,CADmB;AAAA,CAArB;;AAgBAH,OAAO,CAACS,eAAR,GAA0B,iBAAeC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,UAAAA,GADgB,GACRD,OAAO,CAACE,KADA,CAChBD,GADgB;AAAA;AAAA,2CAGNb,KAAK,mDAA4Ca,GAA5C,EAAL,CAAwDE,IAAxD,CAChB,UAACC,QAAD,EAAc;AACZ,mBAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,WAHe,CAHM;;AAAA;AAGlBC,UAAAA,GAHkB;AAQlBC,UAAAA,IARkB,GAQX,EARW;;AASxB,eAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACX,UAAJ,CAAec,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AACxCX,YAAAA,SADwC,GAC5BS,GAAG,CAACX,UAAJ,CAAea,CAAf,EAAkBE,KAAlB,CAAwB,GAAxB,CAD4B;AAE9CC,YAAAA,OAAO,CAACC,GAAR,CAAYf,SAAZ;AACMC,YAAAA,EAHwC,GAGnCD,SAAS,CAACA,SAAS,CAACY,MAAX,CAH0B;AAI9CF,YAAAA,IAAI,CAACM,IAAL,CAAUf,EAAV;AACD;;AAAA;AAduB;AAAA,2CAeKV,KAAK,qDAA8CmB,IAA9C,EAAL,CAA2DJ,IAA3D,CAC3B,UAACC,QAAD,EAAc;AACZ,mBAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,WAH0B,CAfL;;AAAA;AAelBS,UAAAA,cAfkB;AAAA,2CAqBjB;AAAEtB,YAAAA,OAAO,EAAEc,GAAX;AAAgBX,YAAAA,UAAU,EAAEmB;AAA5B,WArBiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B;;AAwBA,eAAexB,OAAf","sourcesContent":["import Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\n\nconst Episode = props => (\n  <Layout>\n    <h1>{props.episode.name}</h1>\n<p>Release date: {props.episode.air_date}</p>\n    <p>Episode: {props.episode.episode}</p>\n    <h2> Characters in this episode</h2>\n    {props.characters.map(character => (\n        <li key={character.id}>\n          <Link href=\"/character/[cid]\" as={`/character/${character.id}`}>\n            <a>{character.name}</a>\n          </Link>\n        </li>\n      ))}\n  </Layout>\n);\n\nEpisode.getInitialProps = async function(context) {\n  const { eid } = context.query;\n\n  const res = await fetch(`https://rickandmortyapi.com/api/episode/${eid}`).then(\n    (response) => {\n      return response.json();\n    }\n  )\n  const cids = [];\n  for (let i = 0; i < res.characters.length; i++) {\n    const character = res.characters[i].split('/');\n    console.log(character)\n    const id = character[character.length]\n    cids.push(id);\n  };\n  const characters_arr = await fetch(`https://rickandmortyapi.com/api/character/${cids}`).then(\n    (response) => {\n      return response.json();\n    })\n\n\n  return { episode: res, characters: characters_arr };\n};\n\nexport default Episode;"]},"metadata":{},"sourceType":"module"}