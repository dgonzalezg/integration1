{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/diego/Google Drive/PUC/2020/Taller de Integracion/Tarea/T1/integration1/pages/location/[lid].js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\n\nvar Location = function Location(props) {\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 3\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, props.location.name), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 1\n    }\n  }, \"Type: \", props.location.type), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, \"Dimension: \", props.location.dimension), __jsx(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }\n  }, \" Residents\"), props.residents.map(function (resident) {\n    return __jsx(\"li\", {\n      key: resident.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }\n    }, __jsx(Link, {\n      href: \"/character/[cid]\",\n      as: \"/character/\".concat(resident.id),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 11\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }\n    }, resident.name)));\n  }));\n};\n\nLocation.getInitialProps = function _callee(context) {\n  var lid, res, rids, i, resident, residents_arr;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          lid = context.query.lid;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"https://rickandmortyapi.com/api/location/\".concat(lid)).then(function (response) {\n            return response.json();\n          }));\n\n        case 3:\n          res = _context.sent;\n          rids = [];\n\n          for (i = 0; i < res.residents.length; i++) {\n            resident = res.residents[i].split('/');\n            rids.push(resident[resident.length - 1]);\n          }\n\n          ;\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(fetch(\"https://rickandmortyapi.com/api/character/\".concat(rids)).then(function (response) {\n            return response.json();\n          }));\n\n        case 9:\n          residents_arr = _context.sent;\n          return _context.abrupt(\"return\", {\n            location: res,\n            residents: residents_arr\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Location;","map":{"version":3,"sources":["/Users/diego/Google Drive/PUC/2020/Taller de Integracion/Tarea/T1/integration1/pages/location/[lid].js"],"names":["Layout","fetch","Link","Location","props","location","name","type","dimension","residents","map","resident","id","getInitialProps","context","lid","query","then","response","json","res","rids","i","length","split","push","residents_arr"],"mappings":";;;;;;;AAAA,OAAOA,MAAP,MAAmB,2BAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK;AAAA,SACpB,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,KAAK,CAACC,QAAN,CAAeC,IAApB,CADF,EAEF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAUF,KAAK,CAACC,QAAN,CAAeE,IAAzB,CAFE,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAeH,KAAK,CAACC,QAAN,CAAeG,SAA9B,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,EAKGJ,KAAK,CAACK,SAAN,CAAgBC,GAAhB,CAAoB,UAAAC,QAAQ;AAAA,WACzB;AAAI,MAAA,GAAG,EAAEA,QAAQ,CAACC,EAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,kBAAX;AAA8B,MAAA,EAAE,uBAAgBD,QAAQ,CAACC,EAAzB,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAID,QAAQ,CAACL,IAAb,CADF,CADF,CADyB;AAAA,GAA5B,CALH,CADoB;AAAA,CAAtB;;AAgBAH,QAAQ,CAACU,eAAT,GAA2B,iBAAeC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,UAAAA,GADiB,GACTD,OAAO,CAACE,KADC,CACjBD,GADiB;AAAA;AAAA,2CAGPd,KAAK,oDAA6Cc,GAA7C,EAAL,CAAyDE,IAAzD,CAChB,UAACC,QAAD,EAAc;AACZ,mBAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,WAHe,CAHO;;AAAA;AAGnBC,UAAAA,GAHmB;AAQnBC,UAAAA,IARmB,GAQZ,EARY;;AASzB,eAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACX,SAAJ,CAAcc,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AACvCX,YAAAA,QADuC,GAC5BS,GAAG,CAACX,SAAJ,CAAca,CAAd,EAAiBE,KAAjB,CAAuB,GAAvB,CAD4B;AAE7CH,YAAAA,IAAI,CAACI,IAAL,CAAUd,QAAQ,CAACA,QAAQ,CAACY,MAAT,GAAgB,CAAjB,CAAlB;AACD;;AAAA;AAZwB;AAAA,2CAcGtB,KAAK,qDAA8CoB,IAA9C,EAAL,CAA2DJ,IAA3D,CAC1B,UAACC,QAAD,EAAc;AACZ,mBAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,WAHyB,CAdH;;AAAA;AAcnBO,UAAAA,aAdmB;AAAA,2CAmBlB;AAAErB,YAAAA,QAAQ,EAAEe,GAAZ;AAAiBX,YAAAA,SAAS,EAAEiB;AAA5B,WAnBkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;;AAsBA,eAAevB,QAAf","sourcesContent":["import Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\n\nconst Location = props => (\n  <Layout>\n    <h1>{props.location.name}</h1>\n<p>Type: {props.location.type}</p>\n    <p>Dimension: {props.location.dimension}</p>\n    <h2> Residents</h2>\n    {props.residents.map(resident => (\n        <li key={resident.id}>\n          <Link href=\"/character/[cid]\" as={`/character/${resident.id}`}>\n            <a>{resident.name}</a>\n          </Link>\n        </li>\n      ))}\n  </Layout>\n);\n\nLocation.getInitialProps = async function(context) {\n  const { lid } = context.query;\n\n  const res = await fetch(`https://rickandmortyapi.com/api/location/${lid}`).then(\n    (response) => {\n      return response.json();\n    }\n  )\n  const rids = [];\n  for (let i = 0; i < res.residents.length; i++) {\n    const resident = res.residents[i].split('/');\n    rids.push(resident[resident.length-1]);\n  };\n\n  const residents_arr = await fetch(`https://rickandmortyapi.com/api/character/${rids}`).then(\n    (response) => {\n      return response.json();\n    })\n\n  return { location: res, residents: residents_arr };\n};\n\nexport default Location;"]},"metadata":{},"sourceType":"module"}