{"ast":null,"code":"var _jsxFileName = \"/Users/diego/Google Drive/PUC/2020/Taller de Integracion/Tarea/T1/integration1/pages/e/[eid].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\n\nconst Episode = props => __jsx(Layout, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 3\n  }\n}, __jsx(\"h1\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }\n}, props.episode.name), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 1\n  }\n}, \"Release date: \", props.episode.air_date), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }\n}, \"Episode: \", props.episode.episode), __jsx(\"h2\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }\n}, \" Characters in this episode\"), props.characters.map(character => __jsx(\"li\", {\n  key: character.id,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }\n}, __jsx(Link, {\n  href: \"/c/[cid]\",\n  as: `/c/${character.id}`,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 11\n  }\n}, __jsx(\"a\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 13\n  }\n}, character.name)))));\n\nEpisode.getInitialProps = async function (context) {\n  const {\n    eid\n  } = context.query;\n  const characters_arr = [];\n  const res = await fetch(`https://rickandmortyapi.com/api/episode/${eid}`).then(response => {\n    return response.json();\n  });\n\n  for (let i = 0; i < res.characters.length; i++) {\n    const character = res.characters[i];\n    const crest = await fetch(character).then(response => {\n      return response.json();\n    });\n    characters_arr.push(crest);\n  }\n\n  ;\n  return {\n    episode: res,\n    characters: characters_arr\n  };\n};\n\nexport default Episode;","map":{"version":3,"sources":["/Users/diego/Google Drive/PUC/2020/Taller de Integracion/Tarea/T1/integration1/pages/e/[eid].js"],"names":["Layout","fetch","Link","Episode","props","episode","name","air_date","characters","map","character","id","getInitialProps","context","eid","query","characters_arr","res","then","response","json","i","length","crest","push"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,2BAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,MAAMC,OAAO,GAAGC,KAAK,IACnB,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAKA,KAAK,CAACC,OAAN,CAAcC,IAAnB,CADF,EAEF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAkBF,KAAK,CAACC,OAAN,CAAcE,QAAhC,CAFE,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAaH,KAAK,CAACC,OAAN,CAAcA,OAA3B,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAJF,EAKGD,KAAK,CAACI,UAAN,CAAiBC,GAAjB,CAAqBC,SAAS,IAC3B;AAAI,EAAA,GAAG,EAAEA,SAAS,CAACC,EAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,MAAC,IAAD;AAAM,EAAA,IAAI,EAAC,UAAX;AAAsB,EAAA,EAAE,EAAG,MAAKD,SAAS,CAACC,EAAG,EAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAID,SAAS,CAACJ,IAAd,CADF,CADF,CADH,CALH,CADF;;AAgBAH,OAAO,CAACS,eAAR,GAA0B,gBAAeC,OAAf,EAAwB;AAChD,QAAM;AAAEC,IAAAA;AAAF,MAAUD,OAAO,CAACE,KAAxB;AAEA,QAAMC,cAAc,GAAG,EAAvB;AACA,QAAMC,GAAG,GAAG,MAAMhB,KAAK,CAAE,2CAA0Ca,GAAI,EAAhD,CAAL,CAAwDI,IAAxD,CACfC,QAAD,IAAc;AACZ,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,GAHe,CAAlB;;AAMA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACT,UAAJ,CAAec,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC9C,UAAMX,SAAS,GAAGO,GAAG,CAACT,UAAJ,CAAea,CAAf,CAAlB;AACA,UAAME,KAAK,GAAG,MAAMtB,KAAK,CAACS,SAAD,CAAL,CAAiBQ,IAAjB,CACjBC,QAAD,IAAc;AACZ,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAHiB,CAApB;AAIAJ,IAAAA,cAAc,CAACQ,IAAf,CAAoBD,KAApB;AACD;;AAAA;AAID,SAAO;AAAElB,IAAAA,OAAO,EAAEY,GAAX;AAAgBT,IAAAA,UAAU,EAAEQ;AAA5B,GAAP;AACD,CAtBD;;AAwBA,eAAeb,OAAf","sourcesContent":["import Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\n\nconst Episode = props => (\n  <Layout>\n    <h1>{props.episode.name}</h1>\n<p>Release date: {props.episode.air_date}</p>\n    <p>Episode: {props.episode.episode}</p>\n    <h2> Characters in this episode</h2>\n    {props.characters.map(character => (\n        <li key={character.id}>\n          <Link href=\"/c/[cid]\" as={`/c/${character.id}`}>\n            <a>{character.name}</a>\n          </Link>\n        </li>\n      ))}\n  </Layout>\n);\n\nEpisode.getInitialProps = async function(context) {\n  const { eid } = context.query;\n\n  const characters_arr = [];\n  const res = await fetch(`https://rickandmortyapi.com/api/episode/${eid}`).then(\n    (response) => {\n      return response.json();\n    }\n  )\n  \n  for (let i = 0; i < res.characters.length; i++) {\n    const character = res.characters[i];\n    const crest = await fetch(character).then(\n      (response) => {\n        return response.json();\n      })\n    characters_arr.push(crest);\n  };\n\n\n\n  return { episode: res, characters: characters_arr };\n};\n\nexport default Episode;"]},"metadata":{},"sourceType":"module"}